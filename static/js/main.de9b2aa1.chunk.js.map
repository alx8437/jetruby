{"version":3,"sources":["Components/Card/Card.module.css","Redux/cardsReducer.ts","Components/Card/Card.tsx","Utils/generateCards.ts","App.tsx","reportWebVitals.ts","Redux/store.ts","index.tsx","App.module.css"],"names":["module","exports","ACTION_TYPES_CARDS","Card","onClick","card","backgroundColor","isFlipped","color","className","styles","style","colors","generateCards","array","forEach","i","j","Math","floor","random","temp","sortArray","concat","map","c","id","v1","canFlip","initialState","cards","firstChoiceCard","secondChoiceCard","setCardIsFlippedAC","cardId","type","SET_CARD_IS_FLIPPED","setCardCanFlipAC","SET_CARD_CAN_FLIP","setFirstChoiceCardAC","SET_FIRST_CHOICE_CARD","SetSecondChoiceCardAC","SET_SECOND_CHOICE_CARD","App","useSelector","state","dispatch","useDispatch","resetFirstAndSecondCards","useCallback","onSuccessGuess","onFailureGuess","setTimeout","useEffect","onCardClick","Fragment","title","wrapper","button","mixCards","SET_MIX_CARDS","setMixCardsAC","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","action","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.de9b2aa1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__hyADG\"};","import {generateCards} from \"../Utils/generateCards\";\r\n\r\n//CONST for action types\r\nenum ACTION_TYPES_CARDS {\r\n    SET_MIX_CARDS = 'APP/SET_MIX_CARDS',\r\n    SET_CARD_IS_FLIPPED = 'APP/SET_CARD_IS_FLIPPED',\r\n    SET_CARD_CAN_FLIP = 'APP/SET_CARD_CAN_FLIP',\r\n    SET_FIRST_CHOICE_CARD = 'APP/SET_FIRST_CHOICE_CARD',\r\n    SET_SECOND_CHOICE_CARD = 'APP/SET_SECOND_CHOICE_CARD',\r\n}\r\n\r\n//Type for card\r\nexport type CardType = {\r\n    id: string,\r\n    color: string,\r\n    isFlipped: boolean,\r\n    canFlip: boolean,\r\n}\r\n\r\n//State type\r\nexport type CardsStateType = {\r\n    cards: Array<CardType>,\r\n    firstChoiceCard:  CardType | null,\r\n    secondChoiceCard: CardType | null,\r\n\r\n}\r\n\r\n//Action creator types\r\ntype SetCardIsFlippedActionType = {\r\n    type: ACTION_TYPES_CARDS.SET_CARD_IS_FLIPPED,\r\n    cardId: string,\r\n    isFlipped: boolean,\r\n}\r\n\r\ntype SetCardCanFlipActionType = {\r\n    type: ACTION_TYPES_CARDS.SET_CARD_CAN_FLIP,\r\n    cardId: string,\r\n    canFlip: boolean,\r\n}\r\n\r\ntype SetFirstChoiceCardActionType = {\r\n    type: ACTION_TYPES_CARDS.SET_FIRST_CHOICE_CARD,\r\n    card:  CardType | null,\r\n}\r\n\r\ntype SetSecondChoiceCardActionType = {\r\n    type: ACTION_TYPES_CARDS.SET_SECOND_CHOICE_CARD,\r\n    card: CardType | null,\r\n}\r\n\r\ntype SetMixCardsActionType = {\r\n    type: ACTION_TYPES_CARDS.SET_MIX_CARDS,\r\n    cards: Array<CardType>,\r\n}\r\n\r\ntype AllActionsTypes = SetCardIsFlippedActionType | SetCardCanFlipActionType | SetSecondChoiceCardActionType\r\n    | SetFirstChoiceCardActionType | SetMixCardsActionType\r\n\r\n\r\n//initial state, is used how default value in reducer parameter\r\nconst initialState: CardsStateType = {\r\n    cards: generateCards(),\r\n    firstChoiceCard: null,\r\n    secondChoiceCard: null,\r\n};\r\n\r\n//Reducer\r\nexport const cardsReducer = (state: CardsStateType = initialState, action: AllActionsTypes): CardsStateType => {\r\n    switch (action.type) {\r\n        case ACTION_TYPES_CARDS.SET_CARD_CAN_FLIP:\r\n            return {\r\n                ...state,\r\n                cards: state.cards.map(c => c.id === action.cardId ? {...c, canFlip: action.canFlip} : c)\r\n            }\r\n        case ACTION_TYPES_CARDS.SET_CARD_IS_FLIPPED:\r\n            return {\r\n                ...state,\r\n                cards: state.cards.map(c => c.id === action.cardId ? {...c, isFlipped: action.isFlipped} : c)\r\n            }\r\n        case ACTION_TYPES_CARDS.SET_FIRST_CHOICE_CARD:\r\n            return {\r\n                ...state,\r\n                firstChoiceCard: action.card,\r\n            }\r\n        case ACTION_TYPES_CARDS.SET_SECOND_CHOICE_CARD:\r\n            return {\r\n                ...state,\r\n                secondChoiceCard: action.card,\r\n            }\r\n        case ACTION_TYPES_CARDS.SET_MIX_CARDS:\r\n            return {\r\n                ...state,\r\n                cards: action.cards,\r\n            }\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\n\r\n//ActionCreators\r\nexport const setCardIsFlippedAC = (cardId: string, isFlipped: boolean): SetCardIsFlippedActionType => {\r\n    return {\r\n        type: ACTION_TYPES_CARDS.SET_CARD_IS_FLIPPED,\r\n        cardId,\r\n        isFlipped,\r\n    }\r\n}\r\n\r\nexport const setCardCanFlipAC = (cardId: string, canFlip: boolean): SetCardCanFlipActionType => {\r\n    return {\r\n        type: ACTION_TYPES_CARDS.SET_CARD_CAN_FLIP,\r\n        cardId,\r\n        canFlip,\r\n    }\r\n}\r\n\r\nexport const setFirstChoiceCardAC = (card: CardType | null): SetFirstChoiceCardActionType => {\r\n    return {\r\n        type: ACTION_TYPES_CARDS.SET_FIRST_CHOICE_CARD,\r\n        card,\r\n    }\r\n}\r\n\r\nexport const SetSecondChoiceCardAC = (card: CardType | null): SetSecondChoiceCardActionType => {\r\n    return {\r\n        type: ACTION_TYPES_CARDS.SET_SECOND_CHOICE_CARD,\r\n        card,\r\n    }\r\n}\r\n\r\nexport const setMixCardsAC = (cards: Array<CardType>): SetMixCardsActionType => {\r\n    return {\r\n        type: ACTION_TYPES_CARDS.SET_MIX_CARDS,\r\n        cards,\r\n    }\r\n}\r\n\r\n\r\n\r\n","import React from \"react\"\r\nimport styles from \"./Card.module.css\"\r\nimport {CardType} from \"../../Redux/cardsReducer\";\r\n\r\ntype CardPropsType = {\r\n    onClick: (card: CardType) => void,\r\n    card: CardType,\r\n}\r\n\r\nexport const Card: React.FC<CardPropsType> = ({onClick, card}) => {\r\n\r\n    //Sent onClick callback\r\n    const onCardClick = () => {\r\n        onClick(card)\r\n    }\r\n\r\n    //Set color if card not flipped\r\n    const backgroundColor = card.isFlipped ? '' : card.color\r\n\r\n    return <div\r\n        onClick={onCardClick}\r\n        className={`${styles.card} + ${backgroundColor}` }\r\n        style={{backgroundColor}}>\r\n    </div>\r\n}","import {v1} from \"uuid\";\r\nimport {CardType} from \"../Redux/cardsReducer\";\r\n\r\n//This colors are used when create cards for game\r\nconst colors = [\r\n    'red',\r\n    'orange',\r\n    'yellow',\r\n    'green',\r\n    'aquamarine',\r\n    'blue',\r\n    'magenta',\r\n    'indigo',\r\n]\r\n\r\n// Make double colors\r\n// return double input array\r\nexport const doubleArray = (array: Array<string>) => {\r\n    return  array.concat(...array);\r\n}\r\n\r\n// Sort function, algorithm by Donald Knut\r\n// return sorting input array\r\nexport const sortArray = (array: Array<string>) => {\r\n    array.forEach((color, i) => {\r\n        const j = Math.floor(Math.random() * i)\r\n        const temp = array[i]\r\n        array[i] = array[j]\r\n        array[j] = temp\r\n    })\r\n    return array\r\n}\r\n\r\n// This function create card objects base on input colors\r\n// return array card for render in game\r\nexport const generateCards = (): Array<CardType> => {\r\n    const doubleColors = doubleArray(colors);\r\n    const sortColors = sortArray(doubleColors);\r\n        return sortColors.map(c => {\r\n        return {\r\n            id: v1(),\r\n            color: c,\r\n            isFlipped: true,\r\n            canFlip: true,\r\n        }\r\n    })\r\n}","import React, {useCallback, useEffect} from 'react';\nimport styles from './App.module.css';\nimport {Card} from \"./Components/Card/Card\";\nimport {generateCards} from \"./Utils/generateCards\";\nimport {\n    CardType,\n    setCardCanFlipAC,\n    setCardIsFlippedAC,\n    setFirstChoiceCardAC,\n    setMixCardsAC,\n    SetSecondChoiceCardAC\n} from \"./Redux/cardsReducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./Redux/store\";\n\n\nconst App = () => {\n\n    // Get parts of state\n    const cards = useSelector<AppRootStateType, Array<CardType>>(state => state.cards);\n    const firstChoiceCard = useSelector<AppRootStateType, CardType | null>(state => state.firstChoiceCard)\n    const secondChoiceCard = useSelector<AppRootStateType, CardType | null>(state => state.secondChoiceCard)\n\n\n    // Dispatch method\n    const dispatch = useDispatch();\n\n\n    // Clear value for first and second choice card\n    // Use dispatch method for sent action in reducer\n    const resetFirstAndSecondCards = useCallback(() => {\n        dispatch(setFirstChoiceCardAC(null));\n        dispatch(SetSecondChoiceCardAC(null));\n\n    }, [dispatch])\n\n\n    // Sending flipped and can be flipped\n    // After value both cards clear\n    const onSuccessGuess = useCallback(() => {\n        if (!firstChoiceCard || !secondChoiceCard) {\n            return;\n        }\n        dispatch(setCardCanFlipAC(firstChoiceCard.id, false));\n        dispatch(setCardCanFlipAC(secondChoiceCard.id, false));\n        dispatch(setCardIsFlippedAC(firstChoiceCard.id, false));\n        dispatch(setCardIsFlippedAC(secondChoiceCard.id, false));\n        resetFirstAndSecondCards();\n    }, [dispatch, firstChoiceCard, secondChoiceCard, resetFirstAndSecondCards])\n\n\n    // This function run when user guess both cards\n    // After value both cards clear\n    const onFailureGuess = useCallback(() => {\n        if (!firstChoiceCard || !secondChoiceCard) {\n            return;\n        }\n        setTimeout(() => {\n            dispatch(setCardIsFlippedAC(firstChoiceCard.id, true))\n        }, 500);\n        setTimeout(() => {\n            dispatch(setCardIsFlippedAC(secondChoiceCard.id, true))\n        }, 500);\n        resetFirstAndSecondCards();\n    }, [dispatch, firstChoiceCard, secondChoiceCard, resetFirstAndSecondCards])\n\n\n    // This we add firstChoiceCard and secondChoiceCard in dependencies that\n    // Check changes and make render after it\n    useEffect(() => {\n        if (!firstChoiceCard || !secondChoiceCard)\n            return;\n        (firstChoiceCard.color === secondChoiceCard.color) ? onSuccessGuess() : onFailureGuess();\n\n    }, [firstChoiceCard, secondChoiceCard, onSuccessGuess, onFailureGuess]);\n\n\n    // This function run when onclick on card\n    // Compares value id choice and input card, if true then return\n    // Else sent card in firstChoiceCard or secondChoiceCard\n    const onCardClick = useCallback((card: CardType) => {\n        if (!card.canFlip) {\n            return;\n        }\n        if ((firstChoiceCard && (card.id === firstChoiceCard.id))) {\n            return;\n        }\n        if (secondChoiceCard && (card.id === secondChoiceCard.id)) {\n            return;\n        }\n        dispatch(setCardIsFlippedAC(card.id, false));\n        firstChoiceCard ? dispatch(SetSecondChoiceCardAC(card)) : dispatch(setFirstChoiceCardAC(card));\n    }, [dispatch, firstChoiceCard, secondChoiceCard])\n\n\n    // This function make reset game\n    const resetGame = () => {\n        const mixCards = generateCards()\n        dispatch(setMixCardsAC(mixCards))\n    }\n\n    return <React.Fragment>\n        <div className={styles.title}>Memo game</div>\n        <div className={styles.wrapper}>\n            {cards.map(card =>\n                <Card\n                    key={card.id}\n                    onClick={onCardClick}\n                    card={card}\n                >{card.color}</Card>)}\n        </div>\n        <button className={styles.button} onClick={resetGame}>Reset game</button>\n    </React.Fragment>\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {createStore} from \"redux\";\r\nimport {cardsReducer} from \"./cardsReducer\";\r\n\r\n\r\n// Here create store\r\nexport const store = createStore(cardsReducer);\r\n\r\n//Create type object store\r\nexport type AppRootStateType = ReturnType<typeof cardsReducer>\r\n\r\n//that can make refer to store\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./Redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"App_title__2LwBm\",\"wrapper\":\"App_wrapper__rcbo8\",\"button\":\"App_button__2ZAm1\"};"],"sourceRoot":""}